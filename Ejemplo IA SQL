Ejemplo Práctico: Reducción de Cambios de Contexto (SELECT en Bucle)

Un patrón ineficiente muy común consiste en ejecutar sentencias SQL dentro de un bucle PL/SQL. Consideremos el siguiente bloque, que recupera IDs y luego busca detalles para cada ID individualmente:
C
Código INEFICIENTE (SELECT en bucle)
Supongamos que tenemos una tabla asignaturas y una tabla profesores, y quieres obtener el nombre del profesor de cada asignatura activa. Un mal enfoque sería este:

      PLSQL
      DECLARE
        TYPE id_asig_t IS TABLE OF asignaturas.id%TYPE;
        l_asig_ids id_asig_t;
        v_profesor_nombre profesores.nombre%TYPE;
      BEGIN
        SELECT id BULK COLLECT INTO l_asig_ids FROM asignaturas WHERE activa = 'S';
        FOR i IN 1..l_asig_ids.COUNT LOOP
          -- SELECT dentro del bucle: ¡Cambio de contexto por cada asignatura!
          SELECT nombre INTO v_profesor_nombre
            FROM profesores
           WHERE id = (SELECT profesor_id FROM asignaturas WHERE id = l_asig_ids(i));
          -- (Procesar v_profesor_nombre...)
        END LOOP;
      END;

¿Por qué es ineficiente?

Por cada asignatura activa, se hace una consulta SQL para obtener el nombre del profesor.
Muchos cambios de contexto entre PL/SQL y SQL (uno por cada asignatura).
Lentitud significativa si hay muchas asignaturas.

Código OPTIMIZADO (JOIN y procesamiento en lote)
Aquí está la versión eficiente usando un cursor y un JOIN:

    PLSQL
    DECLARE
      CURSOR c_asig_prof IS
        SELECT a.id AS asig_id, a.nombre AS asig_nombre, p.nombre AS profesor_nombre
          FROM asignaturas a
          JOIN profesores p ON a.profesor_id = p.id
         WHERE a.activa = 'S';
    BEGIN
      FOR rec IN c_asig_prof LOOP
        -- Procesar rec.asig_id, rec.asig_nombre, rec.profesor_nombre directamente
        NULL; -- Aquí iría la lógica de procesamiento
      END LOOP;
    END;

¿Por qué es mejor?

Una sola consulta SQL obtiene todos los datos en lote.
Solo un cambio de contexto entre PL/SQL y SQL.
Mucho más rápido y escalable.

Este tipo de optimización, identificada y sugerida por la IA, va más allá de la simple corrección sintáctica y aborda mejoras estructurales con un impacto directo en el rendimiento de las aplicaciones del SDAPA, reduciendo la carga sobre la base de datos y agilizando los procesos.
